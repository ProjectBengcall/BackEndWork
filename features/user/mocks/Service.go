// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	domain "bengcall/features/user/domain"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// Deactivate provides a mock function with given fields: userID
func (_m *Service) Deactivate(userID uint) error {
	ret := _m.Called(userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Login provides a mock function with given fields: existUser
func (_m *Service) Login(existUser domain.UserCore) (domain.UserCore, error) {
	ret := _m.Called(existUser)

	var r0 domain.UserCore
	if rf, ok := ret.Get(0).(func(domain.UserCore) domain.UserCore); ok {
		r0 = rf(existUser)
	} else {
		r0 = ret.Get(0).(domain.UserCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.UserCore) error); ok {
		r1 = rf(existUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MyProfile provides a mock function with given fields: userID
func (_m *Service) MyProfile(userID uint) (domain.UserCore, error) {
	ret := _m.Called(userID)

	var r0 domain.UserCore
	if rf, ok := ret.Get(0).(func(uint) domain.UserCore); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(domain.UserCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: newUser
func (_m *Service) Register(newUser domain.UserCore) (domain.UserCore, error) {
	ret := _m.Called(newUser)

	var r0 domain.UserCore
	if rf, ok := ret.Get(0).(func(domain.UserCore) domain.UserCore); ok {
		r0 = rf(newUser)
	} else {
		r0 = ret.Get(0).(domain.UserCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.UserCore) error); ok {
		r1 = rf(newUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProfile provides a mock function with given fields: updatedUser, userID
func (_m *Service) UpdateProfile(updatedUser domain.UserCore, userID uint) (domain.UserCore, error) {
	ret := _m.Called(updatedUser, userID)

	var r0 domain.UserCore
	if rf, ok := ret.Get(0).(func(domain.UserCore, uint) domain.UserCore); ok {
		r0 = rf(updatedUser, userID)
	} else {
		r0 = ret.Get(0).(domain.UserCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.UserCore, uint) error); ok {
		r1 = rf(updatedUser, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewService interface {
	mock.TestingT
	Cleanup(func())
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewService(t mockConstructorTestingTNewService) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
